AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          exports.handler =  async function(event, context) {
            let responseBody = JSON.stringify("EVENT: \n" + JSON.stringify(event, null, 2));
            console.log(responseBody)
            let response = {
              statusCode: 200,
              body: responseBody
            };
            return response;
          }
      FunctionName: !Sub '${Subdomain}-${EnvironmentName}'
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaIAMRole.Arn
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${Subdomain}-${EnvironmentName}'
    DependsOn:
      - LambdaFunction
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt APIGatewayRestAPI.RootResourceId
      PathPart: '{proxy+}'
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
    DependsOn:
      - APIGatewayResource
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lambda-service-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Subdomain}-${EnvironmentName}:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${Subdomain}-${EnvironmentName}'
  CodeBuildIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref S3ArtifactsServicePolicy
      Policies:
        - PolicyName: !Sub 'update-lambda-service-policy-${Subdomain}-${EnvironmentName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:UpdateFunctionCode"
                  - "lambda:GetFunction"
                  - "lambda:PutProvisionedConcurrencyConfig"
                  - "lambda:DeleteAlias"
                  - "lambda:PublishVersion"
                  - "lambda:DeleteFunctionConcurrency"
                  - "lambda:GetAlias"
                  - "lambda:UpdateAlias"
                  - "lambda:CreateAlias"
                  - "lambda:PutFunctionConcurrency"
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Subdomain}-${EnvironmentName}'
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Subdomain}-${EnvironmentName}:*'
        - PolicyName: !Sub 'cloudwatch-logs-service-policy-${Subdomain}-${EnvironmentName}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Subdomain}-${EnvironmentName}:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Subdomain}-${EnvironmentName}'
    DependsOn:
      - LambdaFunction
  LambdaCWLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Subdomain}-${EnvironmentName}'
      RetentionInDays: 365
    DependsOn: LambdaFunction
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Subdomain}-${EnvironmentName}'
      ServiceRole: !Ref CodeBuildIAMRole
      Artifacts:
        Type: S3
        Location: !Ref S3ArtifactsBucketArn
        Packaging: ZIP
        Path: !Sub 'backend/${Subdomain}-${EnvironmentName}'
        NamespaceType: BUILD_ID
        Name: 'artifact.zip'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:1.0
        EnvironmentVariables:
          - Name: lambda_name
            Type: PLAINTEXT
            Value: !Sub '${Subdomain}-${EnvironmentName}'
      Source:
        Type: GITHUB
        Location: !Ref GitRepository
        ReportBuildStatus: true
        GitCloneDepth: 1
      Triggers:
        BuildType: BUILD
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED
            - Type: BASE_REF
              Pattern: !Sub '^refs/heads/${GitBranch}$'
              ExcludeMatchedPattern: false
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: !Sub '${Subdomain}.${Domain}'
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub '${Subdomain}.${Domain}'
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CustomDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt CustomDomain.DistributionHostedZoneId
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Sub '${Subdomain}.${Domain}'
      RestApiId: !Ref APIGatewayRestAPI
      Stage: !Ref EnvironmentName
    DependsOn:
      - CustomDomain

Parameters:
  Domain:
    Type: String
    Description: 'Eg: example.com'
  Subdomain:
    Type: String
    Description: 'Only prefix. Eg: api, dev, dev-api, beta, etc.'
  EnvironmentName:
    Type: String
    Description: 'Eg: dev, beta, test, prod, etc.'
  GitRepository:
    Type: String
    Description: 'HTTPS clone URL to the repository (Must have OAuth access setup *with Organization access, if repository is in an organization*)'
  GitBranch:
    Type: String
    Description: 'Name of branch to be deployed'
  S3ArtifactsBucketArn:
    Type: 'String'
    Description: 'ARN of S3 Bucket being used for storing artifacts'
  S3ArtifactsServicePolicy:
    Type: 'String'
    Description: 'ARN of IAM Policy with write permissions into S3 Artifacts Bucket'
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  CertificateArn:
    Description: "ACM Certificate ARN"
    Type: String

Outputs:
  RestApiURL:
    Description: 'URL of the created REST API'
    Value: !Sub 'https://${Subdomain}.${Domain}'
    Export:
      Name: !Sub '${AWS::StackName}'
